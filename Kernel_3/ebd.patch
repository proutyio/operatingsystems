diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index 014a1cf..b3e608b 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -15,6 +15,11 @@ menuconfig BLK_DEV
 
 if BLK_DEV
 
+config BLK_DEV_EBD
+       tristate "Implementation of encrypted block device"
+       ---help---
+	Hope this works
+
 config BLK_DEV_NULL_BLK
 	tristate "Null test block driver"
 
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index 02b688d..d14bc70 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -40,6 +40,8 @@ obj-$(CONFIG_BLK_DEV_DRBD)     += drbd/
 obj-$(CONFIG_BLK_DEV_RBD)     += rbd.o
 obj-$(CONFIG_BLK_DEV_PCIESSD_MTIP32XX)	+= mtip32xx/
 
+obj-$(CONFIG_BLK_DEV_EBD) += ebd.o
+
 obj-$(CONFIG_BLK_DEV_RSXX) += rsxx/
 obj-$(CONFIG_BLK_DEV_NULL_BLK)	+= null_blk.o
 obj-$(CONFIG_ZRAM) += zram/
diff --git a/drivers/block/ebd.c b/drivers/block/ebd.c
new file mode 100644
index 0000000..b0bc5b5
--- /dev/null
+++ b/drivers/block/ebd.c
@@ -0,0 +1,163 @@
+/*
+ * 		- Encrypted Block Device (ebd.c)-
+ *
+ *		Kyle Prouty
+ *		Nathaniel Whitlock
+ *
+ *		Operating Systems 2 - Fall 2017/2018
+ *		Kernel Problem 3 
+ *
+ *		References:
+ *		https://static.lwn.net/images/pdf/LDD3/ch16.pdf
+ *		https://resources.oreilly.com/examples/9780596005900/blob/master/examples.tar.gz
+ *		http://www.chronox.de/crypto-API/crypto/api-samples.html
+ *		http://blog.superpat.com/2010/05/04/a-simple-block-driver-for-linux-kernel-2-6-31/
+ *			
+ */
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+#include <linux/kernel.h> 
+#include <linux/fs.h>     
+#include <linux/errno.h>  
+#include <linux/types.h> 
+#include <linux/vmalloc.h>
+#include <linux/genhd.h>
+#include <linux/blkdev.h>
+#include <linux/hdreg.h>
+#include <linux/crypto.h>
+
+MODULE_LICENSE("Dual BSD/GPL");
+
+static int major_num = 0;
+module_param(major_num, int, 0);
+static int logical_block_size = 512;
+module_param(logical_block_size, int, 0);
+static int nsectors = 1024; 
+module_param(nsectors, int, 0);
+
+#define KERNEL_SECTOR_SIZE 512
+
+static struct request_queue *Queue;
+static struct crypto_cipher *cipher;
+static char* key = "login";
+module_param(key, charp, 0);
+
+static struct ebd_device {
+	unsigned long size;
+	spinlock_t lock;
+	u8 *data;
+	struct gendisk *gd;
+} Device;
+
+static void ebd_transfer(struct ebd_device *dev, sector_t sector,
+	unsigned long nsect, char *buffer, int write) {
+	unsigned long offset = sector * logical_block_size;
+	unsigned long nbytes = nsect * logical_block_size;
+	unsigned int x;
+	crypto_cipher_clear_flags(cipher, ~0);
+	crypto_cipher_setkey(cipher, key, strlen(key));
+
+	if ((offset + nbytes) > dev->size) {
+		printk (KERN_NOTICE "ebd: Beyond-end write (%ld %ld)\n", offset, nbytes);
+		return;
+	}
+	if(write) {
+		for(x=0; x < nbytes; x += crypto_cipher_blocksize(cipher)) {
+			memset(dev->data+offset+x, 0, crypto_cipher_blocksize(cipher));
+			crypto_cipher_encrypt_one(cipher, dev->data+offset+x, buffer+x);
+		}
+	} else {
+		for(x=0; x < nbytes; x += crypto_cipher_blocksize(cipher)) {
+			crypto_cipher_decrypt_one(cipher, buffer+x, dev->data+offset+x);
+		}
+	}
+}
+
+static void ebd_request(struct request_queue *q) {
+	struct request *req;
+	req = blk_fetch_request(q);
+	while (req != NULL) {
+		if (req == NULL || (req->cmd_type != REQ_TYPE_FS)) {
+			__blk_end_request_all(req, -EIO);
+			continue;
+		}
+		ebd_transfer(&Device, blk_rq_pos(req), blk_rq_cur_sectors(req),
+			bio_data(req->bio), rq_data_dir(req));
+
+		if ( ! __blk_end_request_cur(req, 0) ) {
+			req = blk_fetch_request(q);
+		}
+	}
+}
+
+int ebd_getgeo(struct block_device * block_device, struct hd_geometry * geo) {
+	long size;
+	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
+	geo->cylinders = (size & ~0x3f) >> 6;
+	geo->heads = 4;
+	geo->sectors = 16;
+	geo->start = 0;
+	return 0;
+}
+
+static struct block_device_operations ebd_ops = {
+		.owner  = THIS_MODULE,
+		.getgeo = ebd_getgeo
+};
+
+static int __init ebd_init(void) {
+
+	Device.size = nsectors * logical_block_size;
+	spin_lock_init(&Device.lock);
+	Device.data = vmalloc(Device.size);
+	if (Device.data == NULL)
+		return -ENOMEM;
+
+	Queue = blk_init_queue(ebd_request, &Device.lock);
+	if (Queue == NULL)
+		goto out;
+	blk_queue_logical_block_size(Queue, logical_block_size);
+	
+	major_num = register_blkdev(major_num, "ebd");
+	if (major_num < 0) {
+		printk(KERN_WARNING "ebd: unable to get major number\n");
+		goto out;
+	}
+
+	cipher = crypto_alloc_cipher("aes", 0, 0);
+	if(!cipher)
+		goto out;
+	printk("KEY: %s\n",key);
+	crypto_cipher_setkey(cipher, key, strlen(key));
+
+	Device.gd = alloc_disk(16);
+	if (!Device.gd) 
+		goto out_unregister;
+	Device.gd->major = major_num;
+	Device.gd->first_minor = 0;
+	Device.gd->fops = &ebd_ops;
+	Device.gd->private_data = &Device;
+	strcpy(Device.gd->disk_name, "ebd0");
+	set_capacity(Device.gd, nsectors);
+	Device.gd->queue = Queue;
+	add_disk(Device.gd);
+	return 0;
+
+out_unregister:
+	unregister_blkdev(major_num, "ebd");
+out:
+	vfree(Device.data);
+	return -ENOMEM;
+}
+
+static void __exit ebd_exit(void) {
+	del_gendisk(Device.gd);
+	put_disk(Device.gd);
+	unregister_blkdev(major_num, "ebd");
+	blk_cleanup_queue(Queue);
+	vfree(Device.data);
+}
+
+module_init(ebd_init);
+module_exit(ebd_exit);
\ No newline at end of file
